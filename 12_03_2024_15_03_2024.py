# -*- coding: utf-8 -*-
"""12/03/2024 - 15/03/2024.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tKOmSvFy056HP9Ho3kBqDi6zSMlZ9f_0
"""

# Versão Iterativa

def potenciaI(a, b):
  pot = 1
  for i in range(b):
    pot = pot * a
  return pot

potenciaI(5, 10)

def raiz(N):
  """
  Calcula a raiz quadrada de N
  Usando o algoritmo:
  x_(n+1) = 1/2 * (x_n + N/x_n)
  """
  x, n  = 1, 0
  while abs (x*x - N)> 1e-5: #0,00001 == 1e -5
    # print(f'n = {n : 3}, x = {x: 5.2f}, N/x = {N/x:5.2f} ')
    x = 1/2 * (x + N/x)
    # print(f'x = {x:5.2f}')
  return x

N = 5
raiz(N)*raiz(N)

def pitagoras(a,b):
  """
  Calcula a hipotenuza
  de triângulo retângulo
  de catetos a e b
  """
  return raiz(a*a + b*b)

pitagoras(3, 4)

def eqgrau2(a, b, c):
  """
  a * x **2 + b * x + c = 0
  """
  delta = raiz(b ** 2 - 4 * a * c)
  if delta < 0:
    print(f'Delta ({delta}) e menor do que zero!')
    return None
  rdelta = raiz(delta)
  x1 = (-b - rdelta) / (2*a)
  x2 = (-b + rdelta) / (2*a)
  return x1, x2

def soma_recursiva(n):
  if n == 1:
    return 1
  return n + soma_recursiva(n-1)

soma_recursiva(2)

def fibonacci(n):
  if n<= 2:
    return 1
  return fibonacci(n-1) + fibonacci(n-2)

(fibonacci(1), fibonacci(2), fibonacci(3), fibonacci(4), fibonacci(5), fibonacci(6), fibonacci(7))
[fibonacci(n) for n in range(1,8)]

def estima_pi(n):
  den = list(range(1, 2*n, 2))

list(range(1,2*5, 2))

# Crie a função

def taboada(n):
  resultado = 0
  n = int(input("Digite o número da tabuada "))
  print(f"Tabuada de {n}:")
  for i in range(0, 11):
   resultado = n * i
   print(f"{n} x {i} = {resultado}")


taboada(n)

# Implemente uma função que receba um valor n inteiro e imprima até a n-ésima linha da seguinte forma:
def printNums(n):

  for i in range(n+1):
    for num in range(i):
      print(f"{i}", end=" ")
    print()

printNums(15)

def printNums(n):

  for i in range(n + 1):
    for num in range(1, i):
      print(f"{num}", end=" ")
    print()

printNums(15)

def tempo(t):
  horas = int(t / 3600)
  minutos = int((t % 3600)/ 60)
  segundos = int((t % 3600)% 60)
  print(f"""
    O valor total inserido foi: {t}
    Esse valor equivae há {horas} horas, {minutos} minutos e {segundos} segundos.
        """)
tempo(4814)

def naturalp(p):
  contador = 0
  for i in range(1, p + 1 ):
    if p % i == 0:
      contador += 1
  if contador == 2:
    return True
  else:
    return False

naturalp(11)

def contador_dig(d):
  count, div = 0, 1
  while d > 0:
    count += 1
    d //= 10
  return count

contador_dig(10)

def todos_iguais(t):
  [i for i in (t)]

  if i == i in (t):
   print(True)
  elif i != i in (t):
   print(False)

t = [1,2,3,4,5,6,7]

print(todos_iguais)

t = [1,2,3,4,5,6,7]
[i for i in (t)]