# -*- coding: utf-8 -*-
"""08/03/2024 - 11/03/2024.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1coWIPMjHh449yrVYSYsT3FQmre7CH-N6

Você foi designado para desenvolver uma calculadora em Python que permita aos usuários realizar diversas operações matemáticas, como soma, subtração, multiplicação, divisão e potenciação.
Para isso, você precisa implementar as seguintes funções:
1.	soma(a, b): Retorna a soma dos números Ç e Ç.
2.	subtracao(a, b): Retorna a subtração do número Ç do número Ç.
3.	mu1t1p1icacao(a, b): Retorna o produto dos números Ç e
4.	div1sao(a,  b): Retorna o resultado da divisão do número Ç  pelo número Ç.  Certifique-se avisar quando ocorrer divisão por zero.
5.	potenc1acao(a,  b):  Retorna o resultado de	elevado à potência de    .
"""

# CaIculadora em Python

def soma(a,b):
  x = a + b
  return x

def subtracao(a,b):
  x = a - b
  return x

def multiplicacao(a,b):
  x = a * b
  return x

def divisao(a,b):
  x = a / b
  return x

def  potenciacao(a,b):
  x = a ** b
  return x

# Função para exibir o menu da  ca1culadora
def exibir_menu():
  print("Escolha a operação: ")
  print("1. Soma ")
  print("2. Subtração ")
  print("3. Multiplicação ")
  print("4. Divisão ")
  print("5. Potenciação ")

# Funçâo principal da calculadora
def calculadora():
  exibir_menu( )
  opcao = input("Digite o número da operação desejada: ")
  if opcao in ('1','2','3','4','5'):
    a = float(input("Digite o primeiro número: "))
    b = float(input("Digite o segundo número: "))
    if opcao == '1':
      resultado = soma(a,b)
    elif opcao == '2':
      resultado = subtracao(a, b)
    elif opcao == '3':
      resultado = multiplicacao(a, b)
    elif opcao == '4':
      resultado = divisao(a, b)
    elif opcao == '5':
      resultado = potenciacao(a, b)
    print(f"Resultado = {resultado}")
  else:
   print("Opção lnváIida! Por favor, escolha uma opção váIida.")

#Chamando a função da calculadora para iniciar
calculadora()

def gerar_digito_verificador_1(digitos):
# Implemente a lógica para validar o dígito verificador 1
  soma_prod = 0
  for n in range(9):
    soma_prod += (digitos[n]*(10-n))
  d1 = ((soma_prod *10)%11)%10
  return d1
def gerar_digito_verificador_2(digitos):
  soma = 0
  for n in range(10):
    soma += (digitos[n]*(11-n))
  d2 = ((soma*10)%11)%10
  return  d2
  #print(digitos)

def gerar_cpf(cpf):
  # Implemente a lógica para validar o CPF
  cpf_n = [int(d)for d in cpf]
  d1 = gerar_digito_verificador_1(cpf_n)
  cpf_n.append(d1)
  d2 = gerar_digito_verificador_2(cpf_n)
  cpf_n.append(d2)

  return (str(cpf_n[0]) + str(cpf_n[1]) + str(cpf_n[2]) + '.' +
         str(cpf_n[3]) + str(cpf_n[4]) + str(cpf_n[5]) + '.' +
         str(cpf_n[6]) + str(cpf_n[7]) + str(cpf_n[8]) + '-' +
         str(d1)+str(d2))

# Função principal para solicitar os 9 primeiros dígitos do CPF e gerar os 2 dígitos verificadores
def main():
  cpf9 =  input("Digite os primeiros 9 dígitos do CPF a ser gerado (apenas números): ")
  cpf = gerar_cpf(cpf9)
  print(f'CPF = {cpf}')
# Chamando a função principal
main()